{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Aidan's Course Notes","text":""},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Aidan Maguire</li> <li>Reviewer: Anish Toomu</li> </ul> <p>This tutorial will guide you through setting up a Dev Container for Rust development, starting from a blank directory. By the end, you'll have a functional Rust project that prints \"Hello COMP423\" to standard output.</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Info</p> <p>Make sure you have the following installed: - Docker - VSCode with the Remote - Containers extension - Git</p>"},{"location":"tutorials/rust-setup/#step-1-create-a-new-directory-and-initialize-git","title":"Step 1: Create a New Directory and Initialize Git","text":"<ol> <li>Open a terminal and create a new directory for your project:    <pre><code>mkdir rust-dev-container\ncd rust-dev-container\n</code></pre></li> <li>Initialize a new Git repository:    <pre><code>git init\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#step-2-create-the-dev-container-configuration-files","title":"Step 2: Create the Dev Container Configuration Files","text":"<ol> <li>Create a <code>.devcontainer</code> directory:    <pre><code>mkdir .devcontainer\ncd .devcontainer\n</code></pre></li> <li>Inside the <code>.devcontainer</code> directory, create a <code>devcontainer.json</code> file with the following content:    <pre><code>{\n  \"name\": \"Rust Dev Container\",\n  \"image\": \"mcr.microsoft.com/devcontainers/rust:1-1.72-bullseye\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\"rust-lang.rust-analyzer\"]\n    }\n  }\n}\n</code></pre></li> </ol> <p>Note</p> <p>This configuration uses a base image from Microsoft and installs the <code>rust-analyzer</code> extension for VSCode.</p>"},{"location":"tutorials/rust-setup/#step-3-build-and-open-the-dev-container","title":"Step 3: Build and Open the Dev Container","text":"<ol> <li>Open the project in VSCode.</li> <li>Use the Command Palette (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code> on macOS) and select Remote-Containers: Reopen in Container.</li> <li>Wait for the container to build and start. Once inside the container, open a terminal in VSCode.</li> </ol>"},{"location":"tutorials/rust-setup/#step-4-verify-rust-installation","title":"Step 4: Verify Rust Installation","text":"<p>Info</p> <p>make sure you run this command in the terminal that is inside the dev container or else it will not work!</p> <ol> <li>In the terminal, check the installed Rust version:    <pre><code>rustc --version\n</code></pre>    You should see a recent version of Rust.</li> </ol>"},{"location":"tutorials/rust-setup/#step-5-create-a-new-rust-project","title":"Step 5: Create a New Rust Project","text":"<ol> <li>Create a new binary project with <code>cargo</code>:    <pre><code>cargo new hello_world --vcs none\ncd hello_world\n</code></pre></li> <li>Open the <code>hello_world</code> directory in VSCode.</li> </ol> <p>Tip</p> <p>The <code>--vcs none</code> flag prevents Cargo from initializing a Git repository, as we've already initialized one.</p>"},{"location":"tutorials/rust-setup/#step-6-write-and-run-a-basic-hello-comp423-program","title":"Step 6: Write and Run a Basic \"Hello COMP423\" Program","text":"<ol> <li>Open the <code>src/main.rs</code> file. It should already contain a \"Hello World\" program, so edit it to \"Hello COMP423:    <pre><code>fn main() {\n    println!(\"Hello, COMP423!\");\n}\n</code></pre></li> <li>Build the program using the <code>cargo build</code> command:    <pre><code>cargo build\n</code></pre>    This generates a binary in the <code>target/debug</code> directory.</li> </ol> <p>Info</p> <p><code>cargo build</code> has a similar function to <code>gcc</code> from COMP 211. Both commands compile source code into an executable file.</p> <ol> <li> <p>Run the built binary directly:    <pre><code>./target/debug/hello_world\n</code></pre>    You should see:    <pre><code>Hello, COMP423!\n</code></pre></p> </li> <li> <p>Alternatively, use the <code>cargo run</code> command to build and run the program in one step:    <pre><code>cargo run\n</code></pre>    This will output the same \"Hello, COMP423!\" message.</p> </li> </ol> <p>Info</p> <p>Difference between <code>cargo build</code> and <code>cargo run</code>: - <code>cargo build</code> compiles your program without running it. - <code>cargo run</code> compiles and then immediately runs your program.</p>"},{"location":"tutorials/rust-setup/#step-7-commit-your-work","title":"Step 7: Commit Your Work","text":"<ol> <li>Add all files to Git and commit your changes:    <pre><code>git add .\ngit commit -m \"Initial Rust Dev Container setup\"\n</code></pre></li> </ol>"},{"location":"tutorials/rust-setup/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've successfully set up a Rust Dev Container, created a project, and run your first program. You now have a powerful environment for Rust development.</p>"}]}